ifndef MAKELIBS
       $(error makefile.libs must be included before this makefile)
endif

ifndef MAKESETTINGS
       $(error makefile.set must be included before this makefile)
endif

#----------------------------------------------------------------------
# to use this file you need to have the following defined:
# INCLUDES => this holds the directories to be included in the build

#- compile and generate dependency info
#- the touch command will create the file if it does not exist already
#- the sed command adds the .d file as a target so that it is built at the same time as the 
#.o file so that it is up to date in the calling makefile, thus
# the calling makefile will not need to re-exec to get an up to 
#date .d file
%.d : %.cpp
	@set -e; rm -f $@; \
	touch $@; \
	$(CXX) -MM $(CXXFLAGS) $(INCLUDES) $< > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$

#overwriting the default implicit rule to create a .o file from a .cpp file
%.o : %.cpp
	$(CXX) $(CXXFLAGS) $(INCLUDES) -c $<
# $< is an implicit variable for the first prerequisite. Because it is an implicit rule, 
# in this case there is only one prerequisite (source file) for each required object file

#----------------------------------------------------------------------
# pull in dependency info for *existing* .o files and remake if necessary
include $(SRC:.cpp=.d)

#----------------------------------------------------------------------
.PHONY: clean
clean:
	$(RM) *~ *.o* *.d* *# core *.core $(TEST_NAME)
ifndef IS_TESTPROG
	$(MAKE) clean -C testprogs
endif