#ifndef UTIL_MEDIANFILTER_H
#define UTIL_MEDIANFILTER_H

namespace UTIL
{
  template <class T>
  class MedianFilter
  {
  public:
    MedianFilter(size_t size=3);

    void setSize(size_t size);
    void pushBack();
    T getMedian();
    
  private:
    std::vector<T> d_data;
  };

  MedianFilter(size_t size=3);

  void setSize(size_t size);
  T getMedian();
  
  //----------------------------------------------------------------------//
  template <class T>
    T getMedian(std::vector<T>& vec)
    {
      
      int diff = static_cast<int>(d_durations_buffer.size()) - 3;
      if (diff > 0)
	{
	  assert(d_durations_buffer.size() == 4);
	  d_durations_buffer.erase(d_durations_buffer.begin());
	}
      else if (diff < 0)
	{
	  return d_durations_buffer.back();
	}
      assert(d_durations_buffer.size() == 3);
      std::vector<std::chrono::nanoseconds> sorted_buffer = d_durations_buffer;
      std::sort(sorted_buffer.begin(), sorted_buffer.end());
      return sorted_buffer.at(1);
    }
};

#endif
