======================================================================
Important Commands
======================================================================
The following sequence of commands are needed to pair with the gopro:
- first connect to gopro wifi
- http://10.5.5.9/bacpac/cv
- http://10.5.5.9/gp/gpControl/command/wireless/pair/complete?success=1&deviceName=Laptop
where "Nexus+4" can be replaced by the client device name.

To change modes:
Video: http://10.5.5.9/gp/gpControl/command/mode?p=0
Photo: http://10.5.5.9/gp/gpControl/command/mode?p=1
MultiShot: http://10.5.5.9/gp/gpControl/command/mode?p=2

To trigger the shutter:
Start (all that is needed for Photo): http://10.5.5.9/gp/gpControl/command/shutter?p=1
Stop (Video/Timelapse): http://10.5.5.9/gp/gpControl/command/shutter?p=0

To stream live video wirelessly:
Send the following command to start the stream: http://10.5.5.9/gp/gpControl/execute?p1=gpStream&a1=proto_v2&c1=restart
Then keep the stream up using a udp packet message as shown in https://gist.github.com/3v1n0/38bcd4f7f0cb3c279bad#file-hero4-udp-keep-alive-send-py
You can stream with ffplay with the command: ffplay -fflags nobuffer udp://:8554
Send stream to pi analog out with: omxplayer --live 0 -o local udp://:8554
Send stream to pi hdmi out with: omxplayer --live -o hdmi udp://:8554

set the live video settings as follows:
most wifi dongles will support 150 Mbps
bit rate to 4 Mbps: http://10.5.5.9/gp/gpControl/setting/62/4000000
try the following resolutions:
480: http://10.5.5.9/gp/gpControl/setting/64/4
480 3:4: http://10.5.5.9/gp/gpControl/setting/64/5
480 1:2: http://10.5.5.9/gp/gpControl/setting/64/6
720 (1280x720) : http://10.5.5.9/gp/gpControl/setting/64/7
720 3:4 (960x720) http://10.5.5.9/gp/gpControl/setting/64/8
720 1:2 (640x720) http://10.5.5.9/gp/gpControl/setting/64/9

check this for composite configuration: http://www.raspberrypi-spy.co.uk/2014/07/raspberry-pi-model-b-3-5mm-audiovideo-jack/
info found at https://github.com/KonradIT/goprowifihack/blob/master/HERO4/Livestreaming.md

======================================================================
Research on Pairing Commands
======================================================================
The open source gopro api: 
https://github.com/KonradIT/goprowifihack

The commands above did not work on my gopro hero 5, firmware version HD5.02.01.05.00 . I had to view the http messages between the gopro app and the gopro by using tcpdump and wireshark. tcpdump was used on the phone to capture the data, while wireshark on the pc was used to view the data after capture (from file). 

Where to download tcpdump:
http://www.androidtcpdump.com/

Android debugger (adb) was used to mv tcpdump to a system file location on the phone so that it would run from any directory. First install adb on the pc and get it connecting to the phone:

How to install android debug tools:
http://www.howtogeek.com/125769/how-to-install-and-use-abd-the-android-debug-bridge-utility/
 - install java
   - download and extract to a folder (/usr/local/java...)
   - set the JAVA_HOME environment variable in /etc/bash.bashrc to the java directory
 - download the adb sdk command line tools only and extract them
 - run /tools/bin/sdkmanager --list to list the available packages to install
 - run "./sdkmanager platform_tools" to install the Android SDK Platform Tools (should automatically download to "Downloads")
 - $ ./adb devices to list devices (may need to disable then re-enable usb debugging on phone)

How to install tcpdump on phone using android debug tools:
https://josetrochecoder.wordpress.com/2013/11/04/installing-tcpdump-for-android/

tcpdump was then run remotely from a shell on the pc. The Batch mode capture option described in the following link was used:
https://wladimir-tm4pda.github.io/porting/tcpdump.html
 - create a shell terminal and run tcpdump to a file on the device: $ ./adb shell tcpdump -i any -s 0 -w /sdcard/capture.pcap
 - transfer the capture file to the PC to evaluate with WireShark:  $ ./adb pull /sdcard/capture.pcap
 - install wireshark: $ apt-get install wireshark
 - evaluate with wireshark: $ wireshark capture.pcap

HTTP wireshark methods were filtered for to view the pairing process:
send: http://10.5.5.9/bacpac/cv
receive: HTTP/1.1 200 OK
send: http://10.5.5.9/gp/gpControl/command/wireless/pair/complete?success=1&deviceName=Nexus+4
send: http://10.5.5.9/gp/gpControl/command/wireless/pair/complete?success=1&deviceName=Nexus+4 (probably sent again until an OK was received - may be built in to the tcp protocol)
receive: HTTP/1.1 200 OK
	 and empty json object
send: http://10.5.5.9/gp/gpControl/info
receive: HTTP/1.1 200 OK
	 and json object with product info
send: http://10.5.5.9/gp/gpControl/info
receive: HTTP/1.1 200 OK
	 and json object with status data

The status command is used to keep the stream up
